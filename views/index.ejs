<!DOCTYPE html>
<html>
<head>
  <title>Distance Matrix service</title>
  <style>
    #right-panel {
      font-family: 'Roboto','sans-serif';
      line-height: 30px;
      padding-left: 10px;
    }

    #right-panel select, #right-panel input {
      font-size: 15px;
    }

    #right-panel select {
      width: 100%;
    }

    #right-panel i {
      font-size: 12px;
    }
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    #map {
      height: 100%;
      width: 50%;
    }
    #right-panel {
      float: right;
      width: 48%;
      padding-left: 2%;
    }
    #output {
      font-size: 11px;
    }
    /*#pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 300px;
    }*/
    #type-selector {
      color: #fff;
      background-color: #4d90fe;
      padding: 5px 11px 0px 11px;
    }

    #type-selector label {
      font-family: Roboto;
      font-size: 13px;
      font-weight: 300;
    }

  </style>
  <script type="text/javascript">
    var map = null;
    var destinationIcon = 'https://chart.googleapis.com/chart?' +
            'chst=d_map_pin_letter&chld=D|FF0000|000000';
    var originIcon = 'https://chart.googleapis.com/chart?' +
            'chst=d_map_pin_letter&chld=O|FFFF00|000000';
    var globalCount = 1;
    var currentLocation = null;
    function addInput() {
      globalCount++ ;
      document.getElementById('d').innerHTML = document.getElementById('d').innerHTML + '<br /><input id="pac-input'+globalCount+'" placeholder="Enter a location" />'
      AC('pac-input'+globalCount);
    }
    function AC(objectID){
      var input = document.getElementById(objectID);
      // var types = document.getElementById('type-selector');
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
      var autocomplete = new google.maps.places.Autocomplete(input);
      // autocomplete.bindTo('bounds', map);
      var infowindow = new google.maps.InfoWindow();
      var marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, -29)
      });

      autocomplete.addListener('place_changed', function() {
        infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          window.alert("Autocomplete's returned place contains no geometry");
          return;
        }

        destinations.push(place.geometry.location);
        // map.setCenter(place.geometry.location);
        // map.setZoom(17);  // Why 17? Because it looks good.

        marker.setIcon(/** @type {google.maps.Icon} */({
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
        }));
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        // var address = '';
        // if (place.address_components) {
        //   address = [
        //     (place.address_components[0] && place.address_components[0].short_name || ''),
        //     (place.address_components[1] && place.address_components[1].short_name || ''),
        //     (place.address_components[2] && place.address_components[2].short_name || '')
        //   ].join(' ');
        // }

        // infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        // infowindow.open(map, marker);

      });
    }
  </script>
</head>
<body>
<div id="right-panel">
  <div id="inputs">
    <div id="d">
      <input id="pac-input1">
    </div
    <br />
    <button type="button" onclick="addInput()">Add more?</button>
    <button type="button" onclick="plot()">Plot</button>

    <!--div id="type-selector" class="controls">
      <input type="radio" name="type" id="changetype-all" checked="checked">
      <label for="changetype-all">All</label>

      <input type="radio" name="type" id="changetype-establishment">
      <label for="changetype-establishment">Establishments</label>

      <input type="radio" name="type" id="changetype-address">
      <label for="changetype-address">Addresses</label>

      <input type="radio" name="type" id="changetype-geocode">
      <label for="changetype-geocode">Geocodes</label>
    </div-->

    <!--pre>
      var origin1 = {lat: 55.930, lng: -3.118};
      var origin2 = 'Greenwich, England';
      var destinationA = 'Stockholm, Sweden';
      var destinationB = {lat: 50.087, lng: 14.421};
    </pre-->
  </div>
  <div>
    <strong>Results</strong>
  </div>
  <div id="output"></div>
</div>
<div id="map"></div>
<script>
  var destinations = [];
  function foo() {
    navigator.geolocation.getCurrentPosition(function(currentPosition){
      currentLocation = currentPosition;

      map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: currentPosition.coords.latitude, lng: currentPosition.coords.longitude},
        zoom: 10
      });


      var input = document.getElementById('pac-input1');
      // var types = document.getElementById('type-selector');
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      // map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
      var autocomplete = new google.maps.places.Autocomplete(input);
      // autocomplete.bindTo('bounds', map);
      var infowindow = new google.maps.InfoWindow();
      var marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, -29)
      });

      autocomplete.addListener('place_changed', function() {
        infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          window.alert("Autocomplete's returned place contains no geometry");
          return;
        }
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          destinations.push(place.geometry.location);
          map.setCenter(place.geometry.location);
          map.setZoom(17);  // Why 17? Because it looks good.
        }
        marker.setIcon(/** @type {google.maps.Icon} */({
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
        }));
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        var address = '';
        if (place.address_components) {
          address = [
            (place.address_components[0] && place.address_components[0].short_name || ''),
            (place.address_components[1] && place.address_components[1].short_name || ''),
            (place.address_components[2] && place.address_components[2].short_name || '')
          ].join(' ');
        }

        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        infowindow.open(map, marker);

      });
    });
  }


  function plot() {
    alert(destinations);
    var bounds = new google.maps.LatLngBounds;
    var markersArray = [];
    // navigator.geolocation.getCurrentPosition(function(currentPosition){

    // alert(JSON.stringify(currentPosition.coords.longitude));
    var origin1 = {lat: currentLocation.coords.latitude, lng: currentLocation.coords.longitude};
    // var origin2 = 'Greenwich, England';
    // var destinationA = 'Nagarjuna, Koramangala, Bangalore';
    // var destinationB = {lat: 50.087, lng: 14.421};

    var geocoder = new google.maps.Geocoder;

    var service = new google.maps.DistanceMatrixService;
    service.getDistanceMatrix({
      origins: [origin1],
      destinations: destinations,
      travelMode: google.maps.TravelMode.DRIVING,
      unitSystem: google.maps.UnitSystem.METRIC,
      avoidHighways: false,
      avoidTolls: false
    }, function(response, status) {
      if (status !== google.maps.DistanceMatrixStatus.OK) {
        alert('Error was: ' + status);
      } else {
        var originList = response.originAddresses;
        var destinationList = response.destinationAddresses;
        var outputDiv = document.getElementById('output');
        outputDiv.innerHTML = '';
        deleteMarkers(markersArray);

        var showGeocodedAddressOnMap = function(asDestination) {
          var icon = asDestination ? destinationIcon : originIcon;
          return function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
              map.fitBounds(bounds.extend(results[0].geometry.location));
              markersArray.push(new google.maps.Marker({
                map: map,
                position: results[0].geometry.location,
                icon: icon
              }));
            } else {
              alert('Geocode was not successful due to: ' + status);
            }
          };
        };

        for (var i = 0; i < originList.length; i++) {
          var results = response.rows[i].elements;
          geocoder.geocode({'address': originList[i]},
                  showGeocodedAddressOnMap(false));
          for (var j = 0; j < results.length; j++) {
            geocoder.geocode({'address': destinationList[j]},
                    showGeocodedAddressOnMap(true));
            outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                    ': ' + results[j].distance.text + ' in ' +
                    results[j].duration.text + '<br>';
          }
        }
      }
    });
    // });

  }

  function deleteMarkers(markersArray) {
    for (var i = 0; i < markersArray.length; i++) {
      markersArray[i].setMap(null);
    }
    markersArray = [];
  }
  // function getLocation() {
  //     console.log('in get location');
  //     if (navigator.geolocation) {
  //         navigator.geolocation.getCurrentPosition(function(position){
  //           return position;
  //         });
  //     } else {
  //         alert("Geolocation is not supported by this browser.");
  //     }
  // }
</script>
<!--script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7f7C02E5cm2aEVvifp0TFiawWDOoKTsU&callback=initMap"></script-->
<script async defer type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7f7C02E5cm2aEVvifp0TFiawWDOoKTsU&libraries=places&callback=foo"></script>

</body>
</html>
